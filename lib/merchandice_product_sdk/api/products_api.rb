=begin
#Merchandice Product API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module MerchandiceProductSdk
  class ProductsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieves product collection
    # @param [Hash] opts the optional parameters
    # @return [Array<ProductResponse>]
    def api_products_get(opts = {})
      data, _status_code, _headers = api_products_get_with_http_info(opts)
      data
    end

    # Retrieves product collection
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ProductResponse>, Integer, Hash)>] Array<ProductResponse> data, response status code and response headers
    def api_products_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.api_products_get ...'
      end
      # resource path
      local_var_path = '/api/products'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ProductResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth', 'oauth']

      new_options = opts.merge(
        :operation => :"ProductsApi.api_products_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#api_products_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves product
    # @param id [String] The ID of the product to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [ProductResponse]
    def api_products_id_get(id, opts = {})
      data, _status_code, _headers = api_products_id_get_with_http_info(id, opts)
      data
    end

    # Retrieves product
    # @param id [String] The ID of the product to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductResponse, Integer, Hash)>] ProductResponse data, response status code and response headers
    def api_products_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.api_products_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.api_products_id_get"
      end
      # resource path
      local_var_path = '/api/products/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth', 'oauth']

      new_options = opts.merge(
        :operation => :"ProductsApi.api_products_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#api_products_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an existing product
    # @param id [String] The ID of the product to update.
    # @param [Hash] opts the optional parameters
    # @option opts [ApiProductsIdPatchRequest] :api_products_id_patch_request The representation of the product to update.
    # @return [nil]
    def api_products_id_patch(id, opts = {})
      api_products_id_patch_with_http_info(id, opts)
      nil
    end

    # Updates an existing product
    # @param id [String] The ID of the product to update.
    # @param [Hash] opts the optional parameters
    # @option opts [ApiProductsIdPatchRequest] :api_products_id_patch_request The representation of the product to update.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_products_id_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.api_products_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.api_products_id_patch"
      end
      # resource path
      local_var_path = '/api/products/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/merge-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'api_products_id_patch_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth', 'oauth']

      new_options = opts.merge(
        :operation => :"ProductsApi.api_products_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#api_products_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replaces an existing product
    # @param id [String] The ID of the product to update.
    # @param [Hash] opts the optional parameters
    # @option opts [ProductResponse] :product_response The representation of the product to replace the exist the state.
    # @return [nil]
    def api_products_id_put(id, opts = {})
      api_products_id_put_with_http_info(id, opts)
      nil
    end

    # Replaces an existing product
    # @param id [String] The ID of the product to update.
    # @param [Hash] opts the optional parameters
    # @option opts [ProductResponse] :product_response The representation of the product to replace the exist the state.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_products_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.api_products_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.api_products_id_put"
      end
      # resource path
      local_var_path = '/api/products/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'product_response'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth', 'oauth']

      new_options = opts.merge(
        :operation => :"ProductsApi.api_products_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#api_products_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new product
    # @param [Hash] opts the optional parameters
    # @option opts [Product] :product The representation of the product to create.
    # @return [nil]
    def api_products_post(opts = {})
      api_products_post_with_http_info(opts)
      nil
    end

    # Create new product
    # @param [Hash] opts the optional parameters
    # @option opts [Product] :product The representation of the product to create.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_products_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.api_products_post ...'
      end
      # resource path
      local_var_path = '/api/products'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'product'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth', 'oauth']

      new_options = opts.merge(
        :operation => :"ProductsApi.api_products_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#api_products_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
