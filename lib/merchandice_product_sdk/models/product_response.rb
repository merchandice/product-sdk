=begin
#Merchandice Product API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module MerchandiceProductSdk
  # The response representation for a product.
  class ProductResponse
    # The name assigned to the product.
    attr_accessor :name

    # An identifier assigned to the product by an external source.
    attr_accessor :external_id

    # A description of the product.
    attr_accessor :description

    # The canonical URL for the product.
    attr_accessor :url

    # The style ID that has been assigned to the product.
    attr_accessor :style_id

    # Indicates that the product is no longer current.
    attr_accessor :discontinued

    # The ID of the company that this product belongs to.
    attr_accessor :company_id

    # The sizes offered for the product.
    attr_accessor :sizes

    # The colors offered for the product.
    attr_accessor :colors

    # The categories that have been assigned to the product.
    attr_accessor :categories

    # The sub-categories that have been assigned to the product.
    attr_accessor :sub_categories

    # The prices associated to the product that indicate full retail prices.
    attr_accessor :retail_prices

    # The prices associated to the product that indicate sale prices.
    attr_accessor :sale_prices

    # The customer ratings associated to the product.
    attr_accessor :ratings

    # The unique identifier for the product.
    attr_accessor :id

    # The date and time that the product was last refreshed
    attr_accessor :last_refreshed_at

    # The normalized merchandice categories that have been assigned to the product.
    attr_accessor :normalized_categories

    # The normalized merchandice sub-categories that have been assigned to the product.
    attr_accessor :normalized_sub_categories

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'external_id' => :'external_id',
        :'description' => :'description',
        :'url' => :'url',
        :'style_id' => :'style_id',
        :'discontinued' => :'discontinued',
        :'company_id' => :'company_id',
        :'sizes' => :'sizes',
        :'colors' => :'colors',
        :'categories' => :'categories',
        :'sub_categories' => :'sub_categories',
        :'retail_prices' => :'retail_prices',
        :'sale_prices' => :'sale_prices',
        :'ratings' => :'ratings',
        :'id' => :'id',
        :'last_refreshed_at' => :'last_refreshed_at',
        :'normalized_categories' => :'normalized_categories',
        :'normalized_sub_categories' => :'normalized_sub_categories'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'external_id' => :'String',
        :'description' => :'String',
        :'url' => :'String',
        :'style_id' => :'String',
        :'discontinued' => :'Boolean',
        :'company_id' => :'String',
        :'sizes' => :'Array<ProductVariation>',
        :'colors' => :'Array<ProductVariation>',
        :'categories' => :'Array<ProductAttribute>',
        :'sub_categories' => :'Array<ProductAttribute>',
        :'retail_prices' => :'Array<ProductPrice>',
        :'sale_prices' => :'Array<ProductPrice>',
        :'ratings' => :'Array<ProductRating>',
        :'id' => :'String',
        :'last_refreshed_at' => :'Time',
        :'normalized_categories' => :'Array<ProductAttribute>',
        :'normalized_sub_categories' => :'Array<ProductAttribute>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'Product'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MerchandiceProductSdk::ProductResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MerchandiceProductSdk::ProductResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'style_id')
        self.style_id = attributes[:'style_id']
      end

      if attributes.key?(:'discontinued')
        self.discontinued = attributes[:'discontinued']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'sizes')
        if (value = attributes[:'sizes']).is_a?(Array)
          self.sizes = value
        end
      end

      if attributes.key?(:'colors')
        if (value = attributes[:'colors']).is_a?(Array)
          self.colors = value
        end
      end

      if attributes.key?(:'categories')
        if (value = attributes[:'categories']).is_a?(Array)
          self.categories = value
        end
      end

      if attributes.key?(:'sub_categories')
        if (value = attributes[:'sub_categories']).is_a?(Array)
          self.sub_categories = value
        end
      end

      if attributes.key?(:'retail_prices')
        if (value = attributes[:'retail_prices']).is_a?(Array)
          self.retail_prices = value
        end
      end

      if attributes.key?(:'sale_prices')
        if (value = attributes[:'sale_prices']).is_a?(Array)
          self.sale_prices = value
        end
      end

      if attributes.key?(:'ratings')
        if (value = attributes[:'ratings']).is_a?(Array)
          self.ratings = value
        end
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'last_refreshed_at')
        self.last_refreshed_at = attributes[:'last_refreshed_at']
      end

      if attributes.key?(:'normalized_categories')
        if (value = attributes[:'normalized_categories']).is_a?(Array)
          self.normalized_categories = value
        end
      end

      if attributes.key?(:'normalized_sub_categories')
        if (value = attributes[:'normalized_sub_categories']).is_a?(Array)
          self.normalized_sub_categories = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          external_id == o.external_id &&
          description == o.description &&
          url == o.url &&
          style_id == o.style_id &&
          discontinued == o.discontinued &&
          company_id == o.company_id &&
          sizes == o.sizes &&
          colors == o.colors &&
          categories == o.categories &&
          sub_categories == o.sub_categories &&
          retail_prices == o.retail_prices &&
          sale_prices == o.sale_prices &&
          ratings == o.ratings &&
          id == o.id &&
          last_refreshed_at == o.last_refreshed_at &&
          normalized_categories == o.normalized_categories &&
          normalized_sub_categories == o.normalized_sub_categories
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, external_id, description, url, style_id, discontinued, company_id, sizes, colors, categories, sub_categories, retail_prices, sale_prices, ratings, id, last_refreshed_at, normalized_categories, normalized_sub_categories].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MerchandiceProductSdk.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
